/* AT4J -- Archive file tools for Java -- http://www.at4j.org
 * Copyright (C) 2009 Karl Gustafsson
 *
 * This file is a part of AT4J
 *
 * AT4J is free software: you can redistribute it and/or modify it under the
 * terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation, either version 3 of the License, or (at your option)
 * any later version.
 *
 * AT4J is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
package org.at4j.comp.bzip2;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;

import org.junit.Test;

/**
 * @author Karl Gustafsson
 * @since 1.1
 */
public class ThreeWayRadixQuicksortTest extends AbstractBZip2Test
{
	private byte[] addOvershoot(byte[] data)
	{
		byte[] res = new byte[data.length + ThreeWayRadixQuicksort.DATA_OVERSHOOT];
		System.arraycopy(data, 0, res, 0, data.length);
		int noCopied = 0;
		while (noCopied < ThreeWayRadixQuicksort.DATA_OVERSHOOT)
		{
			int noToCopy = Math.min(ThreeWayRadixQuicksort.DATA_OVERSHOOT - noCopied, data.length);
			System.arraycopy(data, 0, res, data.length + noCopied, noToCopy);
			noCopied += noToCopy;
		}
		return res;
	}

	private int[] truncateArray(int[] data, int length)
	{
		int[] res = new int[length];
		System.arraycopy(data, 0, res, 0, length);
		return res;
	}

	@Test
	public void testShellSortWithConstantInput()
	{
		byte[] data = createData("AAAAAAAA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		// This inits the sort object's pointer array
		qs.radixSort();
		qs.shellSortRange(new ThreeWayRadixQuicksort.QuickSortRangeInfo(0, data.length, 0));
		// The array is already sorted
		assertTrue(Arrays.equals(truncateArray(qs.m_ptr, data.length), new int[] { 0, 1, 2, 3, 4, 5, 6, 7 }));
	}

	@Test
	public void testShellSort1()
	{
		byte[] data = createData("ABCDEFGH");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		// This inits the sort object's pointer array
		qs.radixSort();
		qs.shellSortRange(new ThreeWayRadixQuicksort.QuickSortRangeInfo(0, data.length, 0));
		// The array is already sorted
		assertTrue(Arrays.equals(truncateArray(qs.m_ptr, data.length), new int[] { 0, 1, 2, 3, 4, 5, 6, 7 }));
	}

	@Test
	public void testShellSort2()
	{
		byte[] data = createData("BA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		// This inits the sort object's pointer array
		qs.radixSort();
		qs.shellSortRange(new ThreeWayRadixQuicksort.QuickSortRangeInfo(0, data.length, 0));
		assertTrue(Arrays.equals(truncateArray(qs.m_ptr, data.length), new int[] { 1, 0 }));
	}

	@Test
	public void testShellSort3()
	{
		byte[] data = createData("HGFEDCBA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		// This inits the sort object's pointer array
		qs.radixSort();
		qs.shellSortRange(new ThreeWayRadixQuicksort.QuickSortRangeInfo(0, data.length, 0));
		assertTrue(Arrays.equals(truncateArray(qs.m_ptr, data.length), new int[] { 7, 6, 5, 4, 3, 2, 1, 0 }));
	}

	@Test
	public void testShellSort4()
	{
		byte[] data = createData("AABACCAA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		// This inits the sort object's pointer array
		qs.radixSort();
		qs.shellSortRange(new ThreeWayRadixQuicksort.QuickSortRangeInfo(0, data.length, 0));
		// The strings:
		// 0 AABACCAA
		// 1 ABACCAAA
		// 2 BACCAAAA
		// 3 ACCAAAAB
		// 4 CCAAAABA
		// 5 CAAAABAC
		// 6 AAAABACC
		// 7 AAABACCA
		// 
		// Sorted:
		// 6 AAAABACC
		// 7 AAABACCA
		// 0 AABACCAA
		// 1 ABACCAAA
		// 3 ACCAAAAB
		// 2 BACCAAAA
		// 5 CAAAABAC
		// 4 CCAAAABA
		assertTrue(Arrays.equals(truncateArray(qs.m_ptr, data.length), new int[] { 6, 7, 0, 1, 3, 2, 5, 4 }));
	}

	@Test
	public void testSort1()
	{
		byte[] data = createData("ABCDEFGH");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();
		// The array is already sorted
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 0, 1, 2, 3, 4, 5, 6, 7 }));
	}

	@Test
	public void testSort3()
	{
		byte[] data = createData("HGFEDCBA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 7, 6, 5, 4, 3, 2, 1, 0 }));
	}

	@Test
	public void testSort4()
	{
		byte[] data = createData("AABACCAA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();
		// The strings:
		// 0 AABACCAA
		// 1 ABACCAAA
		// 2 BACCAAAA
		// 3 ACCAAAAB
		// 4 CCAAAABA
		// 5 CAAAABAC
		// 6 AAAABACC
		// 7 AAABACCA
		// 
		// Sorted:
		// 6 AAAABACC
		// 7 AAABACCA
		// 0 AABACCAA
		// 1 ABACCAAA
		// 3 ACCAAAAB
		// 2 BACCAAAA
		// 5 CAAAABAC
		// 4 CCAAAABA
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 6, 7, 0, 1, 3, 2, 5, 4 }));
	}

	@Test
	public void testSort5()
	{
		byte[] data = createData("AAABCBCBCABCBABAAABCABACCABCAABBBABCA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();
		// The strings:
		//  0 AAABCBCBCABCBABAAABCABACCABCAABBBABCA|
		//  1 AABCBCBCABCBABAAABCABACCABCAABBBABCA|A
		//  2 ABCBCBCABCBABAAABCABACCABCAABBBABCA|AA
		//  3 BCBCBCABCBABAAABCABACCABCAABBBABCA|AAA
		//  4 CBCBCABCBABAAABCABACCABCAABBBABCA|AAAB
		//  5 BCBCABCBABAAABCABACCABCAABBBABCA|AAABC
		//  6 CBCABCBABAAABCABACCABCAABBBABCA|AAABCB
		//  7 BCABCBABAAABCABACCABCAABBBABCA|AAABCBC
		//  8 CABCBABAAABCABACCABCAABBBABCA|AAABCBCB
		//  9 ABCBABAAABCABACCABCAABBBABCA|AAABCBCBC
		// 10 BCBABAAABCABACCABCAABBBABCA|AAABCBCBCA
		// 11 CBABAAABCABACCABCAABBBABCA|AAABCBCBCAB
		// 12 BABAAABCABACCABCAABBBABCA|AAABCBCBCABC
		// 13 ABAAABCABACCABCAABBBABCA|AAABCBCBCABCB
		// 14 BAAABCABACCABCAABBBABCA|AAABCBCBCABCBA
		// 15 AAABCABACCABCAABBBABCA|AAABCBCBCABCBAB
		// 16 AABCABACCABCAABBBABCA|AAABCBCBCABCBABA
		// 17 ABCABACCABCAABBBABCA|AAABCBCBCABCBABAA
		// 18 BCABACCABCAABBBABCA|AAABCBCBCABCBABAAA
		// 19 CABACCABCAABBBABCA|AAABCBCBCABCBABAAAB
		// 20 ABACCABCAABBBABCA|AAABCBCBCABCBABAAABC
		// 21 BACCABCAABBBABCA|AAABCBCBCABCBABAAABCA
		// 22 ACCABCAABBBABCA|AAABCBCBCABCBABAAABCAB
		// 23 CCABCAABBBABCA|AAABCBCBCABCBABAAABCABA
		// 24 CABCAABBBABCA|AAABCBCBCABCBABAAABCABAC
		// 25 ABCAABBBABCA|AAABCBCBCABCBABAAABCABACC
		// 26 BCAABBBABCA|AAABCBCBCABCBABAAABCABACCA
		// 27 CAABBBABCA|AAABCBCBCABCBABAAABCABACCAB
		// 28 AABBBABCA|AAABCBCBCABCBABAAABCABACCABC
		// 29 ABBBABCA|AAABCBCBCABCBABAAABCABACCABCA
		// 30 BBBABCA|AAABCBCBCABCBABAAABCABACCABCAA
		// 31 BBABCA|AAABCBCBCABCBABAAABCABACCABCAAB
		// 32 BABCA|AAABCBCBCABCBABAAABCABACCABCAABB
		// 33 ABCA|AAABCBCBCABCBABAAABCABACCABCAABBB
		// 34 BCA|AAABCBCBCABCBABAAABCABACCABCAABBBA
		// 35 CA|AAABCBCBCABCBABAAABCABACCABCAABBBAB
		// 36 A|AAABCBCBCABCBABAAABCABACCABCAABBBABC
		// 
		// Sorted:
		// 36 AAAABCBCBCABCBABAAABCABACCABCAABBBABC
		// 15 AAABCABACCABCAABBBABCAAAABCBCBCABCBAB
		//  0 AAABCBCBCABCBABAAABCABACCABCAABBBABCA
		// 28 AABBBABCAAAABCBCBCABCBABAAABCABACCABC
		// 16 AABCABACCABCAABBBABCAAAABCBCBCABCBABA
		//  1 AABCBCBCABCBABAAABCABACCABCAABBBABCAA
		// 13 ABAAABCABACCABCAABBBABCAAAABCBCBCABCB
		// 20 ABACCABCAABBBABCAAAABCBCBCABCBABAAABC
		// 29 ABBBABCAAAABCBCBCABCBABAAABCABACCABCA
		// 33 ABCAAAABCBCBCABCBABAAABCABACCABCAABBB
		// 25 ABCAABBBABCAAAABCBCBCABCBABAAABCABACC
		// 17 ABCABACCABCAABBBABCAAAABCBCBCABCBABAA
		//  9 ABCBABAAABCABACCABCAABBBABCAAAABCBCBC
		//  2 ABCBCBCABCBABAAABCABACCABCAABBBABCAAA
		// 22 ACCABCAABBBABCAAAABCBCBCABCBABAAABCAB
		// 14 BAAABCABACCABCAABBBABCAAAABCBCBCABCBA
		// 12 BABAAABCABACCABCAABBBABCAAAABCBCBCABC
		// 32 BABCAAAABCBCBCABCBABAAABCABACCABCAABB
		// 21 BACCABCAABBBABCAAAABCBCBCABCBABAAABCA
		// 31 BBABCAAAABCBCBCABCBABAAABCABACCABCAAB
		// 30 BBBABCAAAABCBCBCABCBABAAABCABACCABCAA
		// 34 BCAAAABCBCBCABCBABAAABCABACCABCAABBBA
		// 26 BCAABBBABCAAAABCBCBCABCBABAAABCABACCA
		// 18 BCABACCABCAABBBABCAAAABCBCBCABCBABAAA
		//  7 BCABCBABAAABCABACCABCAABBBABCAAAABCBC
		// 10 BCBABAAABCABACCABCAABBBABCAAAABCBCBCA
		//  5 BCBCABCBABAAABCABACCABCAABBBABCAAAABC
		//  3 BCBCBCABCBABAAABCABACCABCAABBBABCAAAA
		// 35 CAAAABCBCBCABCBABAAABCABACCABCAABBBAB
		// 27 CAABBBABCAAAABCBCBCABCBABAAABCABACCAB
		// 19 CABACCABCAABBBABCAAAABCBCBCABCBABAAAB
		// 24 CABCAABBBABCAAAABCBCBCABCBABAAABCABAC
		//  8 CABCBABAAABCABACCABCAABBBABCAAAABCBCB
		// 11 CBABAAABCABACCABCAABBBABCAAAABCBCBCAB
		//  6 CBCABCBABAAABCABACCABCAABBBABCAAAABCB
		//  4 CBCBCABCBABAAABCABACCABCAABBBABCAAAAB
		// 23 CCABCAABBBABCAAAABCBCBCABCBABAAABCABA
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 36, 15, 0, 28, 16, 1, 13, 20, 29, 33, 25, 17, 9, 2, 22, 14, 12, 32, 21, 31, 30, 34, 26, 18, 7, 10, 5, 3, 35, 27, 19, 24, 8, 11, 6, 4, 23 }));
	}

	@Test
	public void testSort6()
	{
		// The same string as in testQuickSort5, but rotated ten steps to the right
		byte[] data = createData("CAABBBABCAAAABCBCBCABCBABAAABCABACCAB");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 9, 25, 10, 1, 26, 11, 23, 30, 2, 6, 35, 27, 19, 12, 32, 24, 22, 5, 31, 4, 3, 7, 36, 28, 17, 20, 15, 13, 8, 0, 29, 34, 18, 21, 16, 14, 33 }));
	}

	@Test
	public void testSort7()
	{
		byte[] data = createData("BABABACAA");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();

		// The strings:
		//  0 BABABACAA|
		//  1 ABABACAA|B
		//  2 BABACAA|BA
		//  3 ABACAA|BAB
		//  4 BACAA|BABA
		//  5 ACAA|BABAB
		//  6 CAA|BABABA
		//  7 AA|BABABAC
		//  8 A|BABABACA
		//
		// Sorted:
		//  7 AABABABAC
		//  8 ABABABACA
		//  1 ABABACAAB
		//  3 ABACAABAB
		//  5 ACAABABAB
		//  0 BABABACAA
		//  2 BABACAABA
		//  4 BACAABABA
		//  6 CAABABABA
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 7, 8, 1, 3, 5, 0, 2, 4, 6 }));
	}

	@Test
	public void testSort8()
	{
		byte[] data = createData("CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 3, new EncodingScratchpad());
		int[] ptr = qs.sort();

		// Strings:
		//  0 CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|
		//  1 BCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|C
		//  2 CBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CB
		//  3 BCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBC
		//  4 CAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCB
		//  5 AABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBC
		//  6 ABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCA
		//  7 BCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAA
		//  8 CAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAAB
		//  9 AACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABC
		// 10 ACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCA
		// 11 CCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAA
		// 12 CCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAAC
		// 13 CBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACC
		// 14 BABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCC
		// 15 ABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCB
		// 16 BACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBA
		// 17 ACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBAB
		// 18 CAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABA
		// 19 AACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABAC
		// 20 ACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACA
		// 21 CAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAA
		// 22 AABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAAC
		// 23 ABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACA
		// 24 BCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAA
		// 25 CBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAAB
		// 26 BCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABC
		// 27 CBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCB
		// 28 BAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBC
		// 29 AABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCB
		// 30 ABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBA
		// 31 BABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAA
		// 32 ABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAAB
		// 33 BACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABA
		// 34 ACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABAB
		// 35 CCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABA
		// 36 CABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABAC
		// 37 ABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACC
		// 38 BAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCA
		// 39 AABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCAB
		// 40 ABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABA
		// 41 BCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAA
		// 42 CABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAAB
		// 43 ABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABC
		// 44 BBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCA
		// 45 BCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCAB
		// 46 CBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABB
		// 47 BCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBC
		// 48 CCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCB
		// 49 CAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBC
		// 50 AACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCC
		// 51 ACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCA
		// 52 CAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAA
		// 53 AABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAAC
		// 54 ABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACA
		// 55 BAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAA
		// 56 AB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAAB
		// 57 B|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABA

		// Sorted:
		// 29 AABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCB
		// 53 AABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAAC
		//  5 AABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBC
		// 39 AABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCAB
		// 22 AABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAAC
		// 50 AACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCC
		// 19 AACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABAC
		//  9 AACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABC
		// 37 ABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACC
		// 30 ABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBA
		// 54 ABABCBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACA
		// 15 ABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCB
		// 32 ABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAAB
		// 43 ABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABC
		//  6 ABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCA
		// 40 ABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABA
		// 23 ABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACA
		// 56 ABCBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAAB
		// 51 ACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCA
		// 20 ACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACA
		// 17 ACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBAB
		// 34 ACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABAB
		// 10 ACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCA
		// 28 BAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBC
		// 38 BAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCA
		// 14 BABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCC
		// 31 BABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAA
		// 55 BABCBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAA
		// 16 BACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBA
		// 33 BACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABA
		// 44 BBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCA
		//  3 BCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBC
		//  7 BCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAA
		// 41 BCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAA
		// 26 BCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABC
		//  1 BCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|C
		// 24 BCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAA
		// 57 BCBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABA
		// 45 BCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCAB
		// 47 BCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBC
		// 52 CAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAA
		//  4 CAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCB
		// 21 CAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAA
		// 49 CAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBC
		// 18 CAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABA
		//  8 CAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAAB
		// 36 CABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABAC
		// 42 CABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAAB
		// 27 CBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCB
		// 13 CBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACC
		//  2 CBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CB
		// 25 CBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAAB
		//  0 CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|
		// 46 CBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABB
		// 48 CCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABACCABAABCABBCB
		// 35 CCABAABCABBCBCCAACAABAB|CBCBCAABCAACCCBABACAACAABCBCBAABABA
		// 12 CCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAAC
		// 11 CCCBABACAACAABCBCBAABABACCABAABCABBCBCCAACAABAB|CBCBCAABCAA

		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 29, 53, 5, 39, 22, 50, 19, 9, 37, 30, 54, 15, 32, 43, 6, 40, 23, 56, 51, 20, 17, 34, 10, 28, 38, 14, 31, 55, 16, 33, 44, 3, 7, 41, 26, 1, 24, 57, 45, 47, 52, 4,
				21, 49, 18, 8, 36, 42, 27, 13, 2, 25, 0, 46, 48, 35, 12, 11 }));
	}

	@Test
	public void testRadixSort1()
	{
		byte[] data = createData("CAACCCBB");
		ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 12, new EncodingScratchpad());
		int[] frequencies = qs.radixSort();

		// Strings:
		// 0 CAACCCBB|
		// 1 AACCCBB|C
		// 2 ACCCBB|CA
		// 3 CCCBB|CAA
		// 4 CCBB|CAAC
		// 5 CBB|CAACC
		// 6 BB|CAACCC
		// 7 B|CAACCCB

		// After two byte radix sort:
		// 1 AACCCBBC
		// 2 ACCCBBCA
		// 6 BBCAACCC
		// 7 BCAACCCB
		// 0 CAACCCBB
		// 5 CBBCAACC
		// 3 CCCBBCAA
		// 4 CCBBCAAC

		assertTrue(Arrays.equals(truncateArray(qs.m_ptr, data.length), new int[] { 1, 2, 6, 7, 0, 5, 3, 4 }));
		// 0x41 = 65 = 'A'
		assertEquals(0, frequencies[0x4141]);
		assertEquals(1, frequencies[0x4143]);
		assertEquals(2, frequencies[0x4242]);
		assertEquals(3, frequencies[0x4243]);
		assertEquals(4, frequencies[0x4341]);
		assertEquals(5, frequencies[0x4342]);
		assertEquals(6, frequencies[0x4343]);
	}

	@Test
	public void test3WayRadixQuickSort1()
	{
		byte[] data = createData("CAACCCBB");
		int[] ptr = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 12, new EncodingScratchpad()).sort();

		// Strings:
		// 0 CAACCCBB|
		// 1 AACCCBB|C
		// 2 ACCCBB|CA
		// 3 CCCBB|CAA
		// 4 CCBB|CAAC
		// 5 CBB|CAACC
		// 6 BB|CAACCC
		// 7 B|CAACCCB

		// Sorted:
		// 1 AACCCBBC
		// 2 ACCCBBCA
		// 6 BBCAACCC
		// 7 BCAACCCB
		// 0 CAACCCBB
		// 5 CBBCAACC
		// 4 CCBBCAAC
		// 3 CCCBBCAA
		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 1, 2, 6, 7, 0, 5, 4, 3 }));
	}

	@Test
	public void test3WayRadixQuickSort2()
	{
		byte[] data = new byte[] { -10, -32, -105, -45, -11, -74, -1, -2, -115, -61, -123, -1, -1, 17, -27, -17, -3, 20, 33, -58 };
		int[] ptr = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 12, new EncodingScratchpad()).sort();

		// Strings:
		//  00  246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 |
		//  01  224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246
		//  02  151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224
		//  03  211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151
		//  04  245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211
		//  05  182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245
		//  06  255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182
		//  07  254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255
		//  08  141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254
		//  09  195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141
		//  10  133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195
		//  11  255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133
		//  12  255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255
		//  13  017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255
		//  14  229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017
		//  15  239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229
		//  16  253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239
		//  17  020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253
		//  18  033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020
		//  19  198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033

		// Sorted:
		//  13  017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255
		//  17  020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253
		//  18  033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020
		//  10  133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195
		//  08  141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254
		//  02  151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224
		//  05  182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245
		//  09  195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141
		//  19  198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033
		//  03  211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151
		//  01  224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246
		//  14  229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017
		//  15  239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229
		//  04  245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211
		//  00  246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239 253 020 033 198 |
		//  16  253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255 255 017 229 239
		//  07  254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255
		//  12  255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133 255
		//  06  255 254 141 195 133 255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182
		//  11  255 255 017 229 239 253 020 033 198 | 246 224 151 211 245 182 255 254 141 195 133

		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 13, 17, 18, 10, 8, 2, 5, 9, 19, 3, 1, 14, 15, 4, 0, 16, 7, 12, 6, 11 }));
	}

	@Test
	public void test3WayRadixQuickSort3()
	{
		byte[] data = new byte[] { -28, -8, 55, -13, -1, -1, 81, 44, 83, -29, 20, -86, 57, 110, 77, 46, 89, 87, -1, -2, -90, -32, 124, 25, 125, 71, -15, -39, -53 };
		int[] ptr = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 12, new EncodingScratchpad()).sort();

		// Strings:
		//  00  228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 |
		//  01  248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228
		//  02  055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248
		//  03  243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055
		//  04  255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243
		//  05  255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255
		//  06  081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255
		//  07  044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081
		//  08  083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044
		//  09  227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083
		//  10  020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227
		//  11  170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020
		//  12  057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170
		//  13  110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057
		//  14  077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110
		//  15  046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077
		//  16  089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046
		//  17  087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089
		//  18  255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087
		//  19  254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255
		//  20  166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254
		//  21  224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166
		//  22  124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224
		//  23  025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124
		//  24  125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025
		//  25  071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125
		//  26  241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071
		//  27  217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241
		//  28  203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217

		// Sorted:
		//  10  020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227
		//  23  025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124
		//  07  044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081
		//  15  046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077
		//  02  055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248
		//  12  057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170
		//  25  071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125
		//  14  077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110
		//  06  081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255
		//  08  083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044
		//  17  087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089
		//  16  089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046
		//  13  110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057
		//  22  124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224
		//  24  125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025
		//  20  166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254
		//  11  170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020
		//  28  203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217
		//  27  217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241
		//  21  224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166
		//  09  227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083
		//  00  228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 |
		//  26  241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071
		//  03  243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055
		//  01  248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228
		//  19  254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087 255
		//  05  255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255
		//  18  255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243 255 255 081 044 083 227 020 170 057 110 077 046 089 087
		//  04  255 255 081 044 083 227 020 170 057 110 077 046 089 087 255 254 166 224 124 025 125 071 241 217 203 | 228 248 055 243

		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 10, 23, 7, 15, 2, 12, 25, 14, 6, 8, 17, 16, 13, 22, 24, 20, 11, 28, 27, 21, 9, 0, 26, 3, 1, 19, 5, 18, 4 }));
	}

	@Test
	public void test3WayRadixQuickSort4()
	{
		byte[] data = createData("AABAABAABAABAABAABAABAABAABAABAABAABAABAABAABA");
		int[] ptr = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 12, new EncodingScratchpad()).sort();

		// Data:
		// AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA

		// Strings
		//  0: AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA
		//  1: ABAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA A
		//  2: BAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AA
		//  3: AABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AAB
		//  4: ABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABA
		//  5: BAABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABAA
		//  6: AABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABAAB
		//  7: ABA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABAABA
		//  8: BA ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABAABAA
		//  9: A ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABAABAAB
		// 10: ABAABAABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA
		// 11: BAABAABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA A
		// 12: AABAABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA AB
		// 13: ABAABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA ABA
		// 14: BAABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAA
		// 15: AABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAAB
		// 16: ABAA BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAABA
		// 17: BAA BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAABAA
		// 18: AA BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAABAAB
		// 19: A BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAABAABA
		// 20: BAABAABAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA
		// 21: AABAABAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA B
		// 22: ABAABAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA BA
		// 23: BAABAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA BAA
		// 24: AABAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA BAAB
		// 25: ABAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA BAABA
		// 26: BAAB AABAABAABA ABAABA AABAABAABA ABAABAABAA BAABAA
		// 27: AAB AABAABAABA ABAABA AABAABAABA ABAABAABAA BAABAAB
		// 28: AB AABAABAABA ABAABA AABAABAABA ABAABAABAA BAABAABA
		// 29: B AABAABAABA ABAABA AABAABAABA ABAABAABAA BAABAABAA
		// 30: AABAABAABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB
		// 31: ABAABAABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB A
		// 32: BAABAABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AA
		// 33: AABAABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AAB
		// 34: ABAABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABA
		// 35: BAABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABAA
		// 36: AABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABAAB
		// 37: ABA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABAABA
		// 38: BA ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABAABAA
		// 39: A ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABAABAAB
		// 40: ABAABA AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA
		// 41: BAABA AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA A
		// 42: AABA AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA AB
		// 43: ABA AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABA
		// 44: BA AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAA
		// 45: A AABAABAABA ABAABAABAA BAABAABAAB AABAABAABA ABAAB

		// Sorted
		// 45: AAABAABAABAABAABAABAABAABAABAABAABAABAABAABAAB
		// 42: AABAAABAABAABAABAABAABAABAABAABAABAABAABAABAAB
		// 39: AABAABAAABAABAABAABAABAABAABAABAABAABAABAABAAB
		// 36: AABAABAABAAABAABAABAABAABAABAABAABAABAABAABAAB
		// 33: AABAABAABAABAAABAABAABAABAABAABAABAABAABAABAAB
		// 30: AABAABAABAABAABAAABAABAABAABAABAABAABAABAABAAB
		// 27: AABAABAABAABAABAABAAABAABAABAABAABAABAABAABAAB
		// 24: AABAABAABAABAABAABAABAAABAABAABAABAABAABAABAAB
		// 21: AABAABAABAABAABAABAABAABAAABAABAABAABAABAABAAB
		// 18: AABAABAABAABAABAABAABAABAABAAABAABAABAABAABAAB
		// 15: AABAABAABAABAABAABAABAABAABAABAAABAABAABAABAAB
		// 12: AABAABAABAABAABAABAABAABAABAABAABAAABAABAABAAB
		//  9: AABAABAABAABAABAABAABAABAABAABAABAABAAABAABAAB
		//  6: AABAABAABAABAABAABAABAABAABAABAABAABAABAAABAAB
		//  3: AABAABAABAABAABAABAABAABAABAABAABAABAABAABAAAB
		//  0: AABAABAABAABAABAABAABAABAABAABAABAABAABAABAABA

		// 43: ABAAABAABAABAABAABAABAABAABAABAABAABAABAABAABA
		// 40: ABAABAAABAABAABAABAABAABAABAABAABAABAABAABAABA
		// 37: ABAABAABAAABAABAABAABAABAABAABAABAABAABAABAABA
		// 34: ABAABAABAABAAABAABAABAABAABAABAABAABAABAABAABA
		// 31: ABAABAABAABAABAAABAABAABAABAABAABAABAABAABAABA
		// 28: ABAABAABAABAABAABAAABAABAABAABAABAABAABAABAABA
		// 25: ABAABAABAABAABAABAABAAABAABAABAABAABAABAABAABA
		// 22: ABAABAABAABAABAABAABAABAAABAABAABAABAABAABAABA
		// 19: ABAABAABAABAABAABAABAABAABAAABAABAABAABAABAABA
		// 16: ABAABAABAABAABAABAABAABAABAABAAABAABAABAABAABA
		// 13: ABAABAABAABAABAABAABAABAABAABAABAAABAABAABAABA
		// 10: ABAABAABAABAABAABAABAABAABAABAABAABAAABAABAABA
		//  7: ABAABAABAABAABAABAABAABAABAABAABAABAABAAABAABA
		//  4: ABAABAABAABAABAABAABAABAABAABAABAABAABAABAAABA
		//  1: ABAABAABAABAABAABAABAABAABAABAABAABAABAABAABAA
		// 44: BAAABAABAABAABAABAABAABAABAABAABAABAABAABAABAA
		// 41: BAABAAABAABAABAABAABAABAABAABAABAABAABAABAABAA
		// 38: BAABAABAAABAABAABAABAABAABAABAABAABAABAABAABAA
		// 35: BAABAABAABAAABAABAABAABAABAABAABAABAABAABAABAA
		// 32: BAABAABAABAABAAABAABAABAABAABAABAABAABAABAABAA
		// 29: BAABAABAABAABAABAAABAABAABAABAABAABAABAABAABAA
		// 26: BAABAABAABAABAABAABAAABAABAABAABAABAABAABAABAA
		// 23: BAABAABAABAABAABAABAABAAABAABAABAABAABAABAABAA
		// 20: BAABAABAABAABAABAABAABAABAAABAABAABAABAABAABAA
		// 17: BAABAABAABAABAABAABAABAABAABAAABAABAABAABAABAA
		// 14: BAABAABAABAABAABAABAABAABAABAABAAABAABAABAABAA
		// 11: BAABAABAABAABAABAABAABAABAABAABAABAAABAABAABAA
		//  8: BAABAABAABAABAABAABAABAABAABAABAABAABAAABAABAA
		//  5: BAABAABAABAABAABAABAABAABAABAABAABAABAABAAABAA
		//  2: BAABAABAABAABAABAABAABAABAABAABAABAABAABAABAAA

		assertTrue(Arrays.equals(truncateArray(ptr, data.length), new int[] { 45, 42, 39, 36, 33, 30, 27, 24, 21, 18, 15, 12, 9, 6, 3, 0, 43, 40, 37, 34, 31, 28, 25, 22, 19, 16, 13, 10, 7, 4, 1, 44, 41, 38, 35, 32, 29, 26, 23, 20, 17, 14,
				11, 8, 5, 2 }));
	}

	@Test
	public void testSortRepetitiveData()
	{
		for (int size = 2048; size < 1400000; size += 155 * size - 1)
		{
			byte[] data = new byte[size];
			Arrays.fill(data, (byte) 1);
			int noZeroes = 0;
			// Set every fifth element to 0
			for (int i = 4; i < size; i += 5)
			{
				data[i] = 0;
				noZeroes++;
			}

			ThreeWayRadixQuicksort qs = new ThreeWayRadixQuicksort(addOvershoot(data), data.length, 12, new EncodingScratchpad());
			int[] ptr = qs.sort();

			for (int i = 0; i < noZeroes; i++)
			{
				assertEquals(size + ": " + i, 0, data[ptr[i]]);
			}
			for (int i = noZeroes; i < size; i++)
			{
				assertEquals(size + ": " + i, 1, data[ptr[i]]);
			}
		}
	}
}
