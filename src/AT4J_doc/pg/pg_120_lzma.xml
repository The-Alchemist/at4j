<chapter id="chap_lzma">
<title>LZMA compression</title>
<para>LZMA, the Lempel-Ziv-Markov chain-Algorithm, is a compression algorithm
that has been under development since 1998. See
the <xref linkend="bib_wikipedia_article_on_lzma"/>.</para>

<para>&At4J; uses Igor Pavlov's LZMA implementation from the
<xref linkend="bib_lzma_sdk_home_page"/>. It is built around a
standalone encoder and a standalone decoder. The encoder reads data from an
uncompressed stream and writes it to a compressed stream, and the decoder does
the opposite. This <emphasis>pull</emphasis> method of processing data is quite
unlike the <emphasis>push</emphasis> model employed by the Java streams
API.</para>

<para>&At4J; provides stream implementations on top of the encoder and the
decoder, in effect turning them inside out. To accomplish this, the encoder or
the decoder is launched in a separate thread that is running as long as the
stream writing to it or reading from it is open. The compressing stream
implementation is org.at4j.comp.lzma.LzmaOutputStream and the decompressing
stream implementation is org.at4j.comp.lzma.LzmaInputStream.</para>

<para>Clients are, of course, free to choose between using the LZMA SDK's
Encoder and Decoder classes, or using &At4J;'s org.at4j.comp.lzma.LzmaOutputStream and
org.at4j.comp.lzma.LzmaInputStream.</para>

<warning><para>LZMA does not seem to work well with the IBM JDK. See the
&At4J; test results.</para></warning>

<para>An org.at4j.comp.lzma.LzmaOutputStream is configured using an
org.at4j.comp.lzma.LzmaOutputStreamSettings object. There are several
configurable parameters. See the org.at4j.comp.lzma.LzmaOutputStreamSettings
documentation for details. By default, the output stream writes its
configuration before the compressed data. By doing so, an
org.at4j.comp.lzma.LzmaInputStream reading from the file does not have to be
configured manually; it just reads its configuration from the file header. If
the compressed data does not contain the compression
settings, the input stream can be configured using an
org.at4j.comp.lzma.LzmaInputStreamSettings object.</para>

<para>The example below shows how data is compressed by writing it to an LZMA
output stream and then decompressed again by reading from an LZMA input stream.

<example id="ex_cad_lzma">
<title>Compressing and decompressing with LZMA</title>
<programlisting>&ex_cad_lzma;</programlisting>
</example></para>

<para>The example below writes LZMA compressed data to a file without writing
the the compression settings, and then reads the data again using a manually
configured input stream.

<example id="ex_cad_lzma_no_config_in_file">
<title>Compressing and decompressing with LZMA using manual configuration</title>
<programlisting>&ex_cad_lzma_no_config_in_file;</programlisting>
</example></para>

<para>The org.at4j.comp.lzma.LzmaWritableFile and
org.at4j.comp.lzma.LzmaReadableFile objects can transparently
compress data written to and decompress data read from a file.</para>

<para>The next example does the same as <xref linkend="ex_cad_lzma"/>, except that it
uses the org.at4j.comp.lzma.LzmaReadableFile and 
org.at4j.comp.lzma.LzmaWritableFile classes.

<example id="ex_cad_lzma_w_rwf">
<title>Compressing and decompressing with LZMA using &At4J; readable and
writable LZMA files</title>
<programlisting>&ex_cad_lzma_w_rwf;</programlisting>
</example></para>


<section id="standalone_lzma_tools">
<title>Standalone LZMA tools</title>
<para>The org.at4j.comp.lzma.prog.Lzma and org.at4j.comp.lzma.prog.UnLzma classes have
runnable main methods that emulate the behavior of the
<computeroutput>lzma</computeroutput> and <computeroutput>unlzma</computeroutput>
commands. See their API documentation for details on how to use them.</para>
</section>
</chapter>
